# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
- group: services-primary-variables
- name: imageRepository
  value: 'wizeresumeodata'
- name: dockerfilePath
  value: '**/wize.resume.odata/Dockerfile'
- name: tag
  value: '$(Build.BuildId)'
- name: vmImageName
  value: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: 'brandonkorouscontainers'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        buildContext: '.'
        tags: '$(tag)'
          
    - upload: eng
      artifact: eng

- stage: DeployDevelopment
  displayName: Deploy Development
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'services-primary.development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create Connection Secrets
            inputs: 
              action: createSecret
              secretType: generic
              secretName: connectionstrings-resume-secrets
              secretArguments: --from-literal=ConnectionStrings_TenantsContext="$(ConnectionStrings:TenantsContext)" --from-literal=ConnectionStrings_WizeWorksContext="$(ConnectionStrings:WizeWorksContext)" --from-literal=ConnectionStrings_ApplicationInsights="$(ConnectionStrings:ApplicationInsights)" --from-literal=ConnectionStrings_Sentry="$(ConnectionStrings:Sentry)"
              kubernetesServiceConnection: $(KubernetesServiceConnection)
              namespace: development
          - task: KubernetesManifest@0
            displayName: Create Authentication Secrets
            inputs: 
              action: createSecret
              secretType: generic
              secretName: authentication-resume-secrets
              secretArguments: --from-literal=JwtAuthentication_ValidAudience="$(JwtAuthentication:ValidAudience)" --from-literal=JwtAuthentication_ValidIssuer="$(JwtAuthentication:ValidIssuer)"
              kubernetesServiceConnection: $(KubernetesServiceConnection)
              namespace: development
          - task: KubernetesManifest@0
            displayName: Create Auth0 Secrets
            inputs: 
              action: createSecret
              secretType: generic
              secretName: auth0-resume-secrets
              secretArguments: --from-literal=Auth0_Authority="$(Auth0:Authority)" --from-literal=Auth0_Audience="$(Auth0:Audience)" --from-literal=Auth0_ClientSecret="$(Auth0:ClientSecret)" --from-literal=Auth0_ClientId="$(Auth0:ClientId)"
              kubernetesServiceConnection: $(KubernetesServiceConnection)
              namespace: development
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              kubernetesServiceConnection: $(KubernetesServiceConnection)
              namespace: 'development'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(DockerRegistryServiceConnection)'
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: $(KubernetesServiceConnection)
              namespace: 'development'
              manifests: |
                $(Pipeline.Workspace)/eng/development/deployment.odata.yml
                $(Pipeline.Workspace)/eng/development/service.odata.yml
              containers: '$(ContainerRegistry)/$(imageRepository):$(tag)'
              imagePullSecrets: '$(ImagePullSecret)'
